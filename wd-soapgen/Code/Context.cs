using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.VisualBasic;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml.Linq;

/* Assumptions:
 * - Return types are Task wrapped.
 */

namespace WD.SoapGen.Code;

class Context
{
#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public NamespaceDeclarationSyntax Namespace { get; set; }
    public string HeaderTrivia { get; set; }
    public string? SvcutilVersion { get; set; }
    public InterfaceDeclarationSyntax Port { get; set; }
    public InterfaceDeclarationSyntax PortChannel { get; set; }
    public ClassDeclarationSyntax Client { get; set; }
    public ImmutableDictionary<string, ClassDeclarationSyntax> Types { get; set; }
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    public CoalescedFiles Render(ToolingContext ctx, IEnumerable<ClassDeclarationSyntax> classes)
    {
        var i = RenderInterfaces(ctx);
        return null;
    }

    NewFile RenderInterfaces(ToolingContext ctx)
    {
        var sb = new StringBuilder();
        sb.AppendLine(GetHeader(ctx));
        sb.AppendLine();
        sb.AppendLine($"namespace {Namespace.Name.ToString()}");
        sb.AppendLine(@"{");
        sb.AppendLine(Port.ToFullString());
        sb.AppendLine(PortChannel.ToFullString());
        sb.AppendLine(@"}");
        return new NewFile
        {
            Filename = "Interfaces",
            Content = sb.ToString()
        };
    }

    string GetHeader(ToolingContext ctx)
    {
        return $@"{HeaderTrivia}
// This code was generated by dotnet-svcutil {GetSvcutilVersionText()}using the following command:
// {ctx.SvcutilArgs}

// This code was merged by wd-soapgen version {Assembly.GetExecutingAssembly().GetName().Version} using the following command:
// wd-soapgen {string.Join(" ", Environment.GetCommandLineArgs().Skip(1))}";
    }

    string GetSvcutilVersionText()
    {
        if (string.IsNullOrWhiteSpace(SvcutilVersion))
        {
            return "";
        }
        return $"version {SvcutilVersion} ";
    }
}

